<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2019-12-26 13:54:24                    *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoImageBase extends IdentifiableObject implements Created, Sortable
	{
		protected $user = null;
		protected $userId = null;
		protected $createdTime = null;
		protected $type = null;
		protected $typeId = null;
		protected $text = null;
		protected $sort = null;
		
		/**
		 * @return User
		**/
		public function getUser()
		{
			if (!$this->user && $this->userId) {
				$this->user = User::dao()->getById($this->userId);
			}
			
			return $this->user;
		}
		
		public function getUserId()
		{
			return $this->user
				? $this->user->getId()
				: $this->userId;
		}
		
		/**
		 * @return ImageBase
		**/
		public function setUser(User $user = null)
		{
			$this->user = $user;
			$this->userId = $user ? $user->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return ImageBase
		**/
		public function setUserId($id = null)
		{
			$this->user = null;
			$this->userId = $id;
			
			return $this;
		}
		
		/**
		 * @return ImageBase
		**/
		public function dropUser()
		{
			$this->user = null;
			$this->userId = null;
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getCreatedTime()
		{
			return $this->createdTime;
		}
		
		/**
		 * @return ImageBase
		**/
		public function setCreatedTime(Timestamp $createdTime)
		{
			$this->createdTime = $createdTime;
			
			return $this;
		}
		
		/**
		 * @return ImageBase
		**/
		public function dropCreatedTime()
		{
			$this->createdTime = null;
			
			return $this;
		}
		
		/**
		 * @return ImageType
		**/
		public function getType()
		{
			if (!$this->type && $this->typeId) {
				$this->type = new ImageType($this->typeId);
			}
			
			return $this->type;
		}
		
		public function getTypeId()
		{
			return $this->type
				? $this->type->getId()
				: $this->typeId;
		}
		
		/**
		 * @return ImageBase
		**/
		public function setType(ImageType $type)
		{
			$this->type = $type;
			$this->typeId = $type ? $type->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return ImageBase
		**/
		public function setTypeId($id)
		{
			$this->type = null;
			$this->typeId = $id;
			
			return $this;
		}
		
		/**
		 * @return ImageBase
		**/
		public function dropType()
		{
			$this->type = null;
			$this->typeId = null;
			
			return $this;
		}
		
		public function getText()
		{
			return $this->text;
		}
		
		/**
		 * @return ImageBase
		**/
		public function setText($text)
		{
			$this->text = $text;
			
			return $this;
		}
		
		public function getSort()
		{
			return $this->sort;
		}
		
		/**
		 * @return ImageBase
		**/
		public function setSort($sort)
		{
			$this->sort = $sort;
			
			return $this;
		}
	}
?>