<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2020-02-12 00:00:12                    *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoUser extends NamedObject implements Created
	{
		protected $createdTime = null;
		protected $email = null;
		protected $password = null;
		protected $phone = null;
		protected $active = false;
		protected $ban = false;
		protected $banExpire = null;
		protected $banComment = null;
		protected $lastLog = null;
		protected $lastVisit = null;
		protected $ip = null;
		protected $sid = null;
		protected $securityType = null;
		protected $securityTypeId = null;
		protected $group = null;
		protected $groupId = null;
		protected $clones = null;
		protected $creditors = null;
		
		/**
		 * @return Timestamp
		**/
		public function getCreatedTime()
		{
			return $this->createdTime;
		}
		
		/**
		 * @return User
		**/
		public function setCreatedTime(Timestamp $createdTime)
		{
			$this->createdTime = $createdTime;
			
			return $this;
		}
		
		/**
		 * @return User
		**/
		public function dropCreatedTime()
		{
			$this->createdTime = null;
			
			return $this;
		}
		
		public function getEmail()
		{
			return $this->email;
		}
		
		/**
		 * @return User
		**/
		public function setEmail($email)
		{
			$this->email = $email;
			
			return $this;
		}
		
		public function getPassword()
		{
			return $this->password;
		}
		
		/**
		 * @return User
		**/
		public function setPassword($password)
		{
			$this->password = $password;
			
			return $this;
		}
		
		public function getPhone()
		{
			return $this->phone;
		}
		
		/**
		 * @return User
		**/
		public function setPhone($phone)
		{
			$this->phone = $phone;
			
			return $this;
		}
		
		public function getActive()
		{
			return $this->active;
		}
		
		public function isActive()
		{
			return $this->active;
		}
		
		/**
		 * @return User
		**/
		public function setActive($active = false)
		{
			$this->active = ($active === true);
			
			return $this;
		}
		
		public function getBan()
		{
			return $this->ban;
		}
		
		public function isBan()
		{
			return $this->ban;
		}
		
		/**
		 * @return User
		**/
		public function setBan($ban = false)
		{
			$this->ban = ($ban === true);
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getBanExpire()
		{
			return $this->banExpire;
		}
		
		/**
		 * @return User
		**/
		public function setBanExpire(Timestamp $banExpire = null)
		{
			$this->banExpire = $banExpire;
			
			return $this;
		}
		
		/**
		 * @return User
		**/
		public function dropBanExpire()
		{
			$this->banExpire = null;
			
			return $this;
		}
		
		public function getBanComment()
		{
			return $this->banComment;
		}
		
		/**
		 * @return User
		**/
		public function setBanComment($banComment)
		{
			$this->banComment = $banComment;
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getLastLog()
		{
			return $this->lastLog;
		}
		
		/**
		 * @return User
		**/
		public function setLastLog(Timestamp $lastLog = null)
		{
			$this->lastLog = $lastLog;
			
			return $this;
		}
		
		/**
		 * @return User
		**/
		public function dropLastLog()
		{
			$this->lastLog = null;
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getLastVisit()
		{
			return $this->lastVisit;
		}
		
		/**
		 * @return User
		**/
		public function setLastVisit(Timestamp $lastVisit = null)
		{
			$this->lastVisit = $lastVisit;
			
			return $this;
		}
		
		/**
		 * @return User
		**/
		public function dropLastVisit()
		{
			$this->lastVisit = null;
			
			return $this;
		}
		
		public function getIp()
		{
			return $this->ip;
		}
		
		/**
		 * @return User
		**/
		public function setIp($ip)
		{
			$this->ip = $ip;
			
			return $this;
		}
		
		public function getSid()
		{
			return $this->sid;
		}
		
		/**
		 * @return User
		**/
		public function setSid($sid)
		{
			$this->sid = $sid;
			
			return $this;
		}
		
		/**
		 * @return SecurityType
		**/
		public function getSecurityType()
		{
			if (!$this->securityType && $this->securityTypeId) {
				$this->securityType = new SecurityType($this->securityTypeId);
			}
			
			return $this->securityType;
		}
		
		public function getSecurityTypeId()
		{
			return $this->securityType
				? $this->securityType->getId()
				: $this->securityTypeId;
		}
		
		/**
		 * @return User
		**/
		public function setSecurityType(SecurityType $securityType)
		{
			$this->securityType = $securityType;
			$this->securityTypeId = $securityType ? $securityType->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return User
		**/
		public function setSecurityTypeId($id)
		{
			$this->securityType = null;
			$this->securityTypeId = $id;
			
			return $this;
		}
		
		/**
		 * @return User
		**/
		public function dropSecurityType()
		{
			$this->securityType = null;
			$this->securityTypeId = null;
			
			return $this;
		}
		
		/**
		 * @return AclGroup
		**/
		public function getGroup()
		{
			if (!$this->group && $this->groupId) {
				$this->group = AclGroup::dao()->getById($this->groupId);
			}
			
			return $this->group;
		}
		
		public function getGroupId()
		{
			return $this->group
				? $this->group->getId()
				: $this->groupId;
		}
		
		/**
		 * @return User
		**/
		public function setGroup(AclGroup $group = null)
		{
			$this->group = $group;
			$this->groupId = $group ? $group->getId() : null;
			
			return $this;
		}
		
		/**
		 * @return User
		**/
		public function setGroupId($id = null)
		{
			$this->group = null;
			$this->groupId = $id;
			
			return $this;
		}
		
		/**
		 * @return User
		**/
		public function dropGroup()
		{
			$this->group = null;
			$this->groupId = null;
			
			return $this;
		}
		
		/**
		 * @return UserClonesDAO
		**/
		public function getClones($lazy = false)
		{
			if (!$this->clones || ($this->clones->isLazy() != $lazy)) {
				$this->clones = new UserClonesDAO($this, $lazy);
			}
			
			return $this->clones;
		}
		
		/**
		 * @return User
		**/
		public function fillClones($collection, $lazy = false)
		{
			$this->clones = new UserClonesDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->clones->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return UserCreditorsDAO
		**/
		public function getCreditors($lazy = false)
		{
			if (!$this->creditors || ($this->creditors->isLazy() != $lazy)) {
				$this->creditors = new UserCreditorsDAO($this, $lazy);
			}
			
			return $this->creditors;
		}
		
		/**
		 * @return User
		**/
		public function fillCreditors($collection, $lazy = false)
		{
			$this->creditors = new UserCreditorsDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->creditors->mergeList($collection);
			
			return $this;
		}
	}
?>