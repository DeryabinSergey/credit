<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1.master at 2020-06-23 13:22:32                    *
 *   This file will never be generated again - feel free to edit.            *
 *****************************************************************************/

	final class NewsDAO extends AutoNewsDAO
	{
            /**
             * @param Identifiable $news
             * @return News
             */
            public function add(Identifiable $news)
            {
                if (!$news->getCreatedDate() instanceof Date) {
                    $news->setCreatedDate(Date::makeToday());
                }
		
		if (!$news->getType() instanceof NewsType) {
		    $news->setType(NewsType::create(NewsType::TYPE_MAIN));
		}
		
		if (!$news->getSid()) {
		    $news->setSid(
			preg_replace("/[^\w\-]/isu", "",
			    preg_replace("/\s/isu", "-", mb_strtolower(ViewTextUtils::transliterate($news->getTitle())))
			)
		    );
		}

                return parent::add($news);
            }
	    
	    public function dropById($id)
            {
                try {
                    $tr = InnerTransaction::begin($this);

                    $object = $this->getById($id);
                    $previewFiles = array();

                    if ($object->getPreview()) {
                        $previewFiles = PictureUtils::getPreviewFiles($object);
                    }

                    if ($count = parent::dropById($id)) {
                        foreach($previewFiles as $preview)
                            if ($preview && file_exists($preview)) unlink($preview);
                    }

                    $tr->commit();
                } catch (Exception $e) {
                    $tr->rollback();

                    throw $e;
                }

                return $count;
            }    
	    
            public function dropByIds(array $ids)
            {
                $previewList = array();

                try {
                    $tr = InnerTransaction::begin($this);

                    foreach($ids as $id) {
                        $object = $this->getById($id);
                        
                        if ($object->getPreview()) {
                            $previewList = array_merge($previewList, PictureUtils::getPreviewFiles($object));
                        }
                    }

                    if ($count = parent::dropByIds($ids)) {
                        foreach($previewList as $preview)
                            if ($preview && file_exists($preview)) unlink($preview);
                    }

                    $tr->commit();
                } catch (Exception $e) {
                    $tr->rollback();

                    throw $e;
                }

                return $count;
            }	    
	}
	    
?>